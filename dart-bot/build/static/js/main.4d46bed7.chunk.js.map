{"version":3,"sources":["components/ChatWindow/ChatWindow.js","components/SubmitForm/SubmitForm.js","App.js","reportWebVitals.js","index.js"],"names":["ChatList","props","message","poster","className","SubmitForm","onSubmit","type","value","onChange","placeholder","App","stationList","useState","messages","setMessages","inputValue","setInputValue","reverse","map","index","e","preventDefault","alert","newArr","slice","splice","inputArray","split","i","toLowerCase","stationArray","station","toString","searchString","includes","some","res","indexOf","train","objStationData","Exparrival","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAceA,EAXE,SAACC,GAAW,IAAD,EACIA,EAAMC,QAA1BA,EADgB,EAChBA,QAASC,EADO,EACPA,OAEjB,OAEI,qBAAIC,UAAS,UAAKD,EAAL,aAAb,UACKA,EADL,MACgBD,M,MCUTG,MAff,SAAoBJ,GAChB,OACI,uBAAMK,SAAUL,EAAMK,SAAUF,UAAU,YAA1C,UACI,uBACIA,UAAU,QACVG,KAAK,OACLC,MAAOP,EAAMO,MACbC,SAAUR,EAAMQ,SAChBC,YAAY,oBAEhB,wBAAQN,UAAU,eAAeG,KAAK,SAAtC,sBCyGGI,MAjHf,WACE,IAwDMC,EAzCa,CACf,CAAE,QAAW,YACb,CAAE,QAAW,eACb,CAAE,QAAW,eACb,CAAE,QAAW,UACb,CAAE,QAAW,YArBJ,EA2DmBC,mBA1DT,CACrB,CAAEX,QAAS,2BAA4BC,OAAQ,SAFpC,mBA2DNW,EA3DM,KA2DIC,EA3DJ,OA4DuBF,mBAAS,IA5DhC,mBA4DNG,EA5DM,KA4DMC,EA5DN,KAwFb,OACE,sBAAKb,UAAU,MAAf,UACE,0CACA,iJAAmH,uBAAnH,+CAGA,qBAAKA,UAAU,WAAf,SACE,oBAAIA,UAAU,cAAd,SACGU,EAASI,UAAUC,KAAI,SAACjB,EAASkB,GAAV,OACtB,cAAC,EAAD,CAEElB,QAASA,GADJkB,UAMb,cAAC,EAAD,CACEd,SA3CgB,SAAAe,GAEpB,GADAA,EAAEC,iBACiB,KAAfN,EAAmB,OAAOO,MAAM,uBAEpC,IAAMC,EAASV,EAASW,QACxBD,EAAOE,OAAO,EAAG,EAAG,CAAExB,QAASc,EAAYb,OAAQ,SACnDY,EAAYS,GAEZ,IAAMG,EAAaX,EAAWY,MAAM,KAAKT,KAAI,SAAAU,GAAC,OAAIA,EAAEC,iBAC9CC,EAAenB,EAAYO,KAAI,SAAAa,GAAO,OAAIA,EAAQA,WAASC,WAE3DC,EAAelB,EAAWc,cAC5BI,EAAaC,SAAS,aACxBX,EAAOE,OAAO,EAAG,EAAG,CAAExB,QAAQ,+DAAD,OAAiE6B,EAAaE,YAAc9B,OAAQ,QACjIY,EAAYS,IACHG,EAAWS,MAAK,SAAAC,GAAG,OAAIN,EAAaO,QAAQD,IAAQ,MAC7Db,EAAOE,OAAO,EAAG,EAAG,CAAExB,QAAQ,0BAAD,OAA4BgC,EAA5B,mBAjDZ,CACjB,CAAC,eAAkB,CACjB,UAAa,OACb,YAAe,WACf,WAAc,UAGhB,CACE,eAAkB,CAChB,UAAa,OACb,YAAe,WACf,WAAc,UAGlB,CACE,eAAkB,CAChB,UAAa,OACb,YAAe,WACf,WAAc,WAMWT,MAAM,EAAG,GACrBN,KAAI,SAAAoB,GAAK,OAAIA,EAAMC,eAAeC,cAAYR,YAwBsC9B,OAAQ,QAC7GY,EAAYS,KAEZA,EAAOE,OAAO,EAAG,EAAG,CAAExB,QAAQ,4CAA6CC,OAAQ,QACnFY,EAAYS,IAEdP,EAAc,KAsBVT,MAAOQ,EACPP,SAAU,SAAAY,GAAC,OAAIJ,EAAcI,EAAEqB,OAAOlC,cCrG/BmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4d46bed7.chunk.js","sourcesContent":["import React from 'react';\nimport './ChatWindow.css';\n\nconst ChatList = (props) => {\n    const { message, poster } = props.message;\n\n    return(\n\n        <li className={`${poster} listItem`}>\n            {poster} : {message}\n        </li>\n    )\n}\n\nexport default ChatList;\n\n\n","import { React } from 'react';\n\nimport './SubmitForm.css';\n\nfunction SubmitForm(props) {\n    return (\n        <form onSubmit={props.onSubmit} className=\"inputForm\">\n            <input\n                className=\"input\"\n                type=\"text\"\n                value={props.value}\n                onChange={props.onChange}\n                placeholder=\"Send Message...\"\n            />\n            <button className=\"input-button\" type=\"submit\">Send</button>\n        </form>\n    );\n}\n\nexport default SubmitForm;","import './App.css';\nimport { React, useState } from 'react';\n// import axios from 'axios';\nimport ChatList from './components/ChatWindow/ChatWindow';\nimport SubmitForm from './components/SubmitForm/SubmitForm';\n\nfunction App() {\n  const openingMessage = [\n    { message: \"Hi there, how can I help\", poster: \"bot\" },\n  ];\n\n  const allStationsCall = () => {\n    // const url = 'http://api.irishrail.ie/realtime/realtime.asmx/getAllStationsXML'\n    // const headers = {\n    //   \"Access-Control-Allow-Origin\": \"*\"\n    // };\n\n    // axios.get(url, {headers})\n    //   .then(response => console.log(response))\n\n    // Blocked by CORS so I've set up a dmmy array. Levaing it in fucntion to demonstate how I wanted it to work.\n\n    const stations = [\n      { \"station\": \"malahide\" },\n      { \"station\": \"portmarnock\" },\n      { \"station\": \"clongriffin\" },\n      { \"station\": \"sutton\" },\n      { \"station\": \"bayside\" },\n    ]\n\n    return stations;\n  }\n\n  const stationTimeCall = () => {\n    // again a dummy array, would pass in stationCode to call API for that station\n    const nextTrains = [\n      {\"objStationData\": {\n        \"Traincode\": \"E826\",\n        \"destination\": \"Malahide\",\n        \"Exparrival\": \"20:06\" \n        }\n      },\n      {\n        \"objStationData\": {\n          \"Traincode\": \"D823\",\n          \"destination\": \"Malahide\",\n          \"Exparrival\": \"20:15\"\n        }\n      },\n      {\n        \"objStationData\": {\n          \"Traincode\": \"E828\",\n          \"destination\": \"Malahide\",\n          \"Exparrival\": \"21:06\"\n        }\n      }\n    ]\n\n    // This is assuming the API returns in order as it does\n    const next2Trains = nextTrains.slice(0, 2)\n    return next2Trains.map(train => train.objStationData.Exparrival).toString()\n  }\n\n  const stationList = allStationsCall();\n\n  const [messages, setMessages] = useState(openingMessage);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const _handleSubmit = e => {\n    e.preventDefault();\n    if (inputValue === \"\") return alert(\"Message is required\");\n\n    const newArr = messages.slice();\n    newArr.splice(0, 0, { message: inputValue, poster: \"user\" });\n    setMessages(newArr);\n\n    const inputArray = inputValue.split(\" \").map(i => i.toLowerCase())\n    const stationArray = stationList.map(station => station.station).toString()\n\n    const searchString = inputValue.toLowerCase()\n    if (searchString.includes(\"stations\")) {\n      newArr.splice(0, 0, { message: `I think you're looking for a list of stations! Here you go: ${stationArray.toString()}`, poster: \"bot\" });\n      setMessages(newArr);\n    } else if (inputArray.some(res => stationArray.indexOf(res) >= 0)) {\n      newArr.splice(0, 0, { message: `The next two trains at ${searchString} are at ${stationTimeCall()}`, poster: \"bot\" });\n      setMessages(newArr);\n    } else {\n      newArr.splice(0, 0, { message: `\"Sorry, I don't know how to answer that\"`, poster: \"bot\" });\n      setMessages(newArr);\n    }\n    setInputValue(\"\");\n  };\n\n\n  return (\n    <div className=\"App\">\n      <h1>DART Bot</h1>\n      <p>I can help with checking what stations are on the Dart line, and also the next trains at a station you mention. <br/> \n        Try asking me for a list of all stations.\n      </p>\n      <div className=\"chatArea\">\n        <ul className=\"reverseList\">\n          {messages.reverse().map((message, index) => (\n            <ChatList\n              key={index}\n              message={message}\n            />\n          ))}\n        </ul>\n      </div>\n      <SubmitForm\n        onSubmit={_handleSubmit}\n        value={inputValue}\n        onChange={e => setInputValue(e.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}